
eero.sttp.opentracing = false
eero.sttp.opentracing = ${?CINNAMON_TRACING}

sttp {
    servers {
           "*:*" {
               paths {
                    "*" {
                      traceable = false
                      traceable = ${?CINNAMON_TRACING}
                    }
                  }
           }
    }
}



cinnamon.opentracing {
  akka.actor.message.excludes = []

  # https://developer.lightbend.com/docs/telemetry/current/extensions/opentracing/jaeger.html#further-tracer-configuration
  tracer {
    rate-limiting-sampler {
      # Maximum number of sampled traces per second
      max-traces-per-second = 0
      max-traces-per-second = ${?CINNAMON_TRACING_MAX_TRACES_SEC}
    }
    const-sampler {
      # Constant decision on whether to sample traces
      decision = false
      decision = ${?CINNAMON_TRACING_CONSTANT_SAMPLER_DECISION}
    }
    dynamic-rate-limit-sampler {
        debug = false
        debug = ${?CINNAMON_TRACING_DYNAMIC_SAMPLER_DEBUG}
        factory-class = "eero.tracing.DynamicRateLimitingSamplerFactory"
    }
    sampler = dynamic-rate-limit-sampler
    sampler = ${?CINNAMON_TRACING_SAMPLER}
  }

  # https://developer.lightbend.com/docs/telemetry/current/extensions/opentracing/jaeger.html#jaeger-configuration
  jaeger {
    host = "localhost"
    port = 6831
  }

  # https://developer.lightbend.com/docs/telemetry/current/extensions/opentracing/enabling.html#debug-traces-forced-sampling-
  http {
    debug-header = "jaeger-debug-id"
  }

  # https://developer.lightbend.com/docs/telemetry/current/extensions/opentracing/enabling.html#auto-trace
  auto-trace-when-debug = on

  # https://developer.lightbend.com/docs/telemetry/current/extensions/opentracing/enabling.html#alpakka-kafka-configuration
  alpakka.kafka {
    consumer-spans = on
    producer-spans = on
    trace-consumers = ${?CINNAMON_TRACING}
    trace-producers = ${?CINNAMON_TRACING}
  }
}

cinnamon.akka {
  actors {
    "/user/*" {
      excludes = [
        "akka.http.*", 
        "akka.stream.*",
        "akka.cluster.*"
      ]
      report-by = class
      traceable = false
      traceable = ${?CINNAMON_TRACING}
    }
  }
}

cinnamon.akka.http {
  clients {
    "*:*" {
      paths {
        "*" {
          traceable = false
          traceable = ${?CINNAMON_TRACING}
        }
        "/v1/kv/dynamickv/JSON/dynamicconfig" {
          traceable = false
        }
        "/v1/kv/dynamickv/JSON/throttles" {
          traceable = false
        }
      }
    }
  }
}

cinnamon.play.http {
  clients {
    "*:*" {
      paths {
        "*" {
          traceable = false
          traceable = ${?CINNAMON_TRACING}
        }
      }
    }
  }
  servers {
    "*:*" {
      paths {
        "*" {
          traceable = false
          traceable = ${?CINNAMON_TRACING}
        }
        "/users/:id/pii" {
          traceable = ${?CINNAMON_TRACING_PII}
        }
        "/healthcheck" {
          traceable = false
        }
        "/about" {
          traceable = false
        }
      }
    }
  }
}

grpc {
    servers {
      "*:*" {
        services {
            "*" {
                 methods {
                    "*" {
                        traceable = false
                        traceable = ${?CINNAMON_TRACING}
                    }
                    "Check" {
                        traceable = false
                    }
                    "ServerReflectionInfo" {
                        traceable = false
                    }
                    "About" {
                        traceable = false
                    }
                 }
            }
        }
      }
    }
}

cinnamon.slf4j.mdc {
  log-correlation += opentracing-trace-id

  # https://developer.lightbend.com/docs/telemetry/current/extensions/mdc.html#opentracing-trace-ids
  opentracing-trace-id {
    sampled-only = off
    all-scopes = on
  }
}
